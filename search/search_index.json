{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde9 USSI1R - Algorithmique et programmation","text":"<p>Ce module vous introduit aux principes de la programmation orient\u00e9e objet (POO) \u00e0 travers le langage Java, pilier essentiel du d\u00e9veloppement logiciel moderne.  </p>"},{"location":"#planning-des-cours-et-tp","title":"\ud83d\udcc5 Planning des cours et TP","text":"S\u00e9ance Date Cours TP 01 01/10/2025 Introduction \u00e0 Java TP 08 02 06/10/2025 Introduction \u00e0 la POO TP 09 03 18/10/2025 Classes et Objets TP 10 04 23/10/2025 Rappels TP 11 05 25/10/2025 H\u00e9ritage et Polymorphisme TP 12 06 30/10/2025 Classes Abstraites et Interfaces TP 13 07 06/11/2025 Exceptions et gestion d\u2019erreurs TP 14 08 08/11/2025 R\u00e9vision Examen"},{"location":"cours/","title":"Cours","text":"<p>test</p>"},{"location":"tp/tp01/","title":"TP8 : Java \u2013 It\u00e9rations","text":"Exercice 1 : Calcul de Moyenne  <p>\u00c9crire un programme qui demande \u00e0 l\u2019utilisateur d\u2019entrer le nombre de notes, puis chaque note, et qui calcule la moyenne.</p> Astuce <p>Utilise une boucle for et une variable somme pour additionner les notes au fur et \u00e0 mesure.</p> Exercice 2 : Calcul de Moyenne (Autre Version) <p>Ecrire un programme qui demande \u00e0 l\u2019utilisateur d\u2019entrer des notes, puis qui calcule la moyenne quand l\u2019utilisateur entre -1 comme valeur. </p> Astuce <p>Utilise une variable nbNotes pour compter le nombre de notes au fur et \u00e0 mesure.</p> Exercice 3 : Chiffres d\u2019un nombre entier <p>\u00c9crire un programme qui demande \u00e0 l\u2019utilisateur d\u2019entrer un nombre entier, puis affiche :</p> <ul> <li>le chiffre des unit\u00e9s,  </li> <li>le chiffre des dizaines,  </li> <li>le chiffre des centaines,  </li> <li>et ainsi de suite tant qu\u2019il reste des chiffres.</li> </ul> <p>Exemples</p> <p>Entr\u00e9e : 1028 Sortie : <pre><code>10 puissance 0 : 8\n10 puissance 1 : 2\n10 puissance 2 : 0\n10 puissance 3 : 1\n</code></pre> Entr\u00e9e : 928 Sortie : <pre><code>10 puissance 0 : 8\n10 puissance 1 : 2\n10 puissance 2 : 9\n</code></pre></p> Astuce <p>Utilise les op\u00e9rateurs % (modulo) et / (division enti\u00e8re). \u00c0 chaque it\u00e9ration, le modulo te donne le dernier chiffre, et la division enti\u00e8re permet de supprimer ce chiffre pour passer au suivant.</p> Exercice 4 : Factoriel <p>\u00c9crire un programme qui demande \u00e0 l\u2019utilisateur d\u2019entrer un nombre n, puis calcule et affiche n! (factorielle de n).</p> <p>Exemples</p> <p><pre><code>5! = 5.4.3.2.1 = 120\n</code></pre> <pre><code>0! = 1\n</code></pre></p> Astuce <p>Tu peux r\u00e9soudre cet exercice de deux fa\u00e7ons :</p> <ul> <li>avec une boucle (for ou while) qui multiplie les nombres de 1 \u00e0 n,  </li> <li>ou en utilisant une fonction r\u00e9cursive o\u00f9 la fonction s\u2019appelle elle-m\u00eame selon la relation : n! = n \u00d7 (n - 1)! avec le cas de base 0! = 1.</li> </ul> <p>Exemples</p> <pre><code>5! = 5.4! \n4! = 4.3! \n3! = 3.2! \n2! = 2.1! \n1! = 1.0! \n0! = 1\n</code></pre> Exercice 5 : Nombre de Fibonacci (difficile) <p>\u00c9crire un programme qui demande \u00e0 l\u2019utilisateur d\u2019entrer un nombre n, puis calcule et affiche le ni\u00e8me nombre de Fibonacci (Fn).</p> <p>La suite de Fibonacci est d\u00e9finie ainsi : - F\u2081 = 1 - F\u2082 = 1 - F\u2099\u208a\u2082 = F\u2099\u208a\u2081 + F\u2099</p> Astuce <p>Tu peux calculer le nombre de Fibonacci :</p> <ul> <li>soit avec une boucle (it\u00e9rative) en ajoutant les deux derniers termes pour obtenir le suivant,  </li> <li>soit avec une fonction r\u00e9cursive d\u00e9finie par la relation ci-dessus. \u26a0\ufe0f  la version r\u00e9cursive est simple \u00e0 \u00e9crire.</li> </ul> Exercice 6 : Approximation de \u03c0 par la m\u00e9thode de Vi\u00e8te <p>On consid\u00e8re deux suites (v\u2099) et (u\u2099) d\u00e9finies par les relations suivantes :  </p> \\[ v_0 = 0 \\quad \\text{et} \\quad v_{n+1} = \\frac{\\sqrt{1 + v_n}}{2} \\] \\[ u_0 = 2 \\quad \\text{et} \\quad u_{n+1} =  \\frac{u_n }{v_{n+1}} \\] <p>La suite (u\u2099) converge vers \u03c0.</p> <p>\u00c9crire un programme qui demande \u00e0 l\u2019utilisateur d\u2019entrer le rang n, puis calcule et affiche l\u2019approximation de \u03c0 correspondante.</p> Astuce <ul> <li>Utilise une boucle pour calculer successivement les valeurs de v\u2099 et u\u2099.  </li> <li>La variable u te donnera l\u2019approximation finale de \u03c0 apr\u00e8s n it\u00e9rations.  </li> <li>Utilise des doubles pour plus de pr\u00e9cision.</li> </ul> Exemples <p>Entr\u00e9e : n = 10 Sortie : <pre><code>Approximation de \u03c0 : 3.1415914215111997\n</code></pre></p> Exercice 7 : Nombres premiers <ol> <li> <p>\u00c9crire une fonction qui d\u00e9termine si un entier est premier.  </p> <p>Rappel</p> <p>Un nombre est premier s\u2019il a exactement deux diviseurs : 1 et lui-m\u00eame.</p> </li> <li> <p>\u00c9crire un programme qui :</p> <ul> <li>demande \u00e0 l\u2019utilisateur d\u2019entrer un entier,   </li> <li>puis affiche tous les nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 n (si n &lt; 1000).</li> </ul> </li> </ol> Astuce <ul> <li>Pour v\u00e9rifier si un nombre est premier, il suffit de tester s\u2019il est divisible par un entier entre 2 et \u221an.  </li> <li>Utilise une fonction bool\u00e9enne <code>estPremier(int n)</code> qui renvoie true ou false.  </li> <li>Pour la partie (2), parcours tous les entiers de 2 \u00e0 n et affiche ceux pour lesquels <code>estPremier()</code> renvoie vrai.</li> </ul> Exercice 8 : Nombres parfaits <p>Un entier naturel est dit parfait lorsqu\u2019il est \u00e9gal \u00e0 la somme de tous ses diviseurs propres (c\u2019est-\u00e0-dire tous ses diviseurs sauf lui-m\u00eame).  </p> <p>Exemple</p> <p>6 est parfait car 6 = 1 + 2 + 3.</p> <ol> <li> <p>\u00c9crire une fonction qui teste si un nombre entr\u00e9 par l\u2019utilisateur est parfait.</p> </li> <li> <p>\u00c9crire un programme qui demande \u00e0 l\u2019utilisateur un entier n et affiche tous les nombres parfaits inf\u00e9rieurs ou \u00e9gaux \u00e0 n.</p> </li> </ol> Astuce <ul> <li>Pour trouver les diviseurs propres d\u2019un nombre, teste tous les entiers de 1 \u00e0 n/2.  </li> <li>Si la somme des diviseurs est \u00e9gale \u00e0 n, alors le nombre est parfait.  </li> <li>Tu peux cr\u00e9er une fonction <code>estParfait(int n)</code> qui retourne true ou false.</li> </ul>"}]}